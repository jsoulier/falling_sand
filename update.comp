#version 450

#include "config.hpp"
#include "random.glsl"

layout(local_size_x = UPDATE_THREADS, local_size_y = UPDATE_THREADS) in;
layout(set = 0, binding = 0, r32ui) uniform readonly uimage2D readImage;
layout(set = 1, binding = 0, r32ui) uniform uimage2D writeImage;
layout(set = 2, binding = 0) uniform uniformOffset
{
    uint offset;
};
layout(set = 2, binding = 1) uniform uniformTime
{
    int time;
};

const ivec2 Offsets[9] = ivec2[](
    ivec2(0, 0),
    ivec2(0, 1),
    ivec2(0, 2),
    ivec2(1, 0),
    ivec2(1, 1),
    ivec2(1, 2),
    ivec2(2, 0),
    ivec2(2, 1),
    ivec2(2, 2)
);

bool contains(ivec2 position)
{
    return
        position.x >= 0 &&
        position.x < WIDTH &&
        position.y < HEIGHT &&
        position.y >= 0;
}

void main()
{
    ivec2 position = ivec2(gl_GlobalInvocationID).xy * 3 + Offsets[offset % 9];
    if (!contains(position))
    {
        return;
    }
    uint particle = imageLoad(readImage, position).x;
    uint type = (particle >> 24) & 0xFFu;
    switch (type)
    {
    case STONE:
        imageStore(writeImage, position, uvec4(particle));
        return;
    case SAND:
        {
            int neighborDirection;
            if (random(ivec3(position, time)) > 0.5f)
            {
                neighborDirection = -1;
            }
            else
            {
                neighborDirection = 1;
            }
            ivec2 neighbors[3] = ivec2[](
                position + ivec2(0, 1),
                position + ivec2(-neighborDirection, 1),
                position + ivec2(neighborDirection, 1)
            );
            for (int i = 0; i < 3; i++)
            {
                if (!contains(neighbors[i]))
                {
                    continue;
                }
                uint readType = (imageLoad(readImage, neighbors[i]).x >> 24) & 0xFFu;
                uint writeType = (imageLoad(writeImage, neighbors[i]).x >> 24) & 0xFFu;
                if (readType == EMPTY && writeType == EMPTY)
                {
                    imageStore(writeImage, neighbors[i], uvec4(particle));
                    return;
                }
            }
            imageStore(writeImage, position, uvec4(particle));
            return;
        }
    case EMPTY:
        /* noop */
        return;
    }
}