#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct uniformOffset
{
    uint offset;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(16u, 16u, 1u);

constant spvUnsafeArray<int2, 4> _28 = spvUnsafeArray<int2, 4>({ int2(0), int2(0, 1), int2(1), int2(1, 0) });

kernel void main0(constant uniformOffset& _31 [[buffer(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int2 id = int2(int3(gl_GlobalInvocationID).xy) + _28[_31.offset % 4u];
    bool _47 = id.x >= 960;
    bool _56;
    if (!_47)
    {
        _56 = id.y >= 720;
    }
    else
    {
        _56 = _47;
    }
    if (_56)
    {
        return;
    }
}

