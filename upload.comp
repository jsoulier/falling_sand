#version 450

#include "config.hpp"

layout(local_size_x = UPLOAD_THREADS) in;
layout(set = 0, binding = 0) buffer readonly bufferReadBuffer 
{
    uint readBuffer[];
};
layout(set = 1, binding = 0, r32ui) uniform uimage2D writeImage;
layout(set = 2, binding = 0) uniform uniformSize
{
    uint size;
};
layout(set = 2, binding = 1) uniform uniformParticle
{
    uint particle;
};
layout(set = 2, binding = 2) uniform uniformRadius
{
    int radius;
};

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id >= size)
    {
        return;
    }
    int cx = int((readBuffer[id] >> 0) & 0xFFFF);
    int cy = int((readBuffer[id] >> 16) & 0xFFFF);
    for (int dx = -radius; dx <= radius; dx++)
    for (int dy = -radius; dy <= radius; dy++)
    {
        /* NOTE: using >= since smallest radius is 1 (not 0) */
        if (length(ivec2(dx, dy)) >= radius)
        {
            continue;
        }
        int x = cx + dx;
        int y = cy + dy;
        if (x >= 0 && y >= 0 && x < WIDTH && y < HEIGHT)
        {
            imageStore(writeImage, ivec2(x, y), uvec4(particle));
        }
    }
}